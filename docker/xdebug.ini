; docker/xdebug.ini

; Enable Xdebug extension
zend_extension=xdebug

; Xdebug 3 Configuration
; See https://xdebug.org/docs/upgrade_guide for more information on upgrading from Xdebug 2.

; Development Features / Modes
; "develop" enables development helpers like the overloaded var_dump().
; "debug" enables step debugging.
; "profile" enables profiling.
; "trace" enables execution tracing.
; "gcstats" enables garbage collection statistics.
; "coverage" enables code coverage analysis.
xdebug.mode=debug,develop

; Start debugging for every request (alternatively, use "trigger" and a browser extension/bookmarklet)
xdebug.start_with_request=yes

; The host where your IDE is listening.
; 'host.docker.internal' is a special DNS name that resolves to the internal IP address of the host machine from within Docker Desktop.
; For Linux, you might need to use your host's actual IP address or configure Docker networking differently.
xdebug.client_host=host.docker.internal

; The port on which your IDE is listening (default is 9003 for Xdebug 3).
xdebug.client_port=9003

; Log file for Xdebug (optional, but useful for troubleshooting)
; Ensure the directory is writable by the web server user (www-data).
; You might need to create /var/log/xdebug and set permissions in your Dockerfile or entrypoint.
; For simplicity, we'll initially comment this out. If you need it, uncomment and manage permissions.
; xdebug.log="/var/log/xdebug/xdebug.log"

; Other potentially useful settings:
; xdebug.discover_client_host = false ; Set to true if client_host is not fixed or behind NAT/VPN
; xdebug.idekey = "VSCODE" ; A specific IDE key if your IDE requires it (e.g., VSCODE, PHPSTORM)
; xdebug.max_nesting_level = 256
; xdebug.cli_color = 1
